#!/bin/bash

probe_name="http-frontend-4"
probe_type="httpProbe"
infra_type="Kubernetes"
org_id="InstructorLedTraining"
project_id=$MY_HARNESS_PROJECT
account_id=$MY_HARNESS_ACCOUNT
pat=$MY_HARNESS_USER_PAT

# API CALL: CREATE HTTP PROBE

echo -e "\n==> START API CALL: Create HTTP probe"

curl --location 'https://app.harness.io/gateway/chaos/manager/api/query' \
--header 'Content-Type: application/json' \
--header 'X-API-KEY: '"$pat" \
--data '{"query":"mutation AddProbe(\n  $request: ProbeRequest!,\n  $identifiers: IdentifiersRequest!\n) {\n  addProbe(\n    request: $request,\n    identifiers: $identifiers\n  ) {\n    probeID\n    identifiers {\n      orgIdentifier\n      accountIdentifier\n      projectIdentifier\n    }\n    name\n    description\n    tags\n    type\n    infrastructureType\n    kubernetesHTTPProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      url\n      method {\n        get {\n          criteria\n          responseCode\n          responseBody\n        }\n        post {\n          contentType\n          body\n          bodyPath\n          criteria\n          responseCode\n          responseBody\n        }\n      }\n      verbosity\n      auth {\n        authType\n        credentials\n        credentialsFile\n      }\n      tlsConfig {\n        caFile\n        certFile\n        keyFile\n        insecureSkipVerify\n      }\n      headers {\n        key\n        value\n      }\n    }\n    linuxHTTPProperties {\n      probeTimeout\n      interval\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      url\n      method {\n        get {\n          criteria\n          responseCode\n          responseBody\n        }\n        post {\n          contentType\n          body\n          bodyPath\n          criteria\n          responseCode\n          responseBody\n        }\n      }\n      insecureSkipVerify\n      auth {\n        authType\n        credentials\n        credentialsFile\n      }\n      tlsConfig {\n        caFile\n        certFile\n        keyFile\n        insecureSkipVerify\n      }\n      headers {\n        key\n        value\n      }\n    }\n    windowsHTTPProperties {\n      probeTimeout\n      interval\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      url\n      method {\n        get {\n          criteria\n          responseCode\n          responseBody\n        }\n        post {\n          contentType\n          body\n          bodyPath\n          criteria\n          responseCode\n          responseBody\n        }\n      }\n      auth {\n        authType\n        credentials\n        credentialsFile\n      }\n      tlsConfig {\n        caFile\n        certFile\n        keyFile\n        insecureSkipVerify\n      }\n      headers {\n        key\n        value\n      }\n    }\n    kubernetesCMDProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      command\n      comparator {\n        type\n        value\n        criteria\n      }\n      source\n      verbosity\n    }\n    linuxCMDProperties {\n      probeTimeout\n      interval\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      command\n      comparator {\n        type\n        value\n        criteria\n      }\n      source\n    }\n    kubernetesDatadogProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      datadogSite\n      syntheticsTest {\n        testType\n        publicId\n      }\n      metrics {\n        datadogQuery\n        timeFrame\n        comparator {\n          type\n          value\n          criteria\n        }\n      }\n      datadogCredentialsSecretName\n      verbosity\n    }\n    linuxDatadogProperties {\n      probeTimeout\n      interval\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      datadogSite\n      syntheticsTest {\n        testType\n        publicId\n      }\n      metrics {\n        datadogQuery\n        timeFrame\n        comparator {\n          type\n          value\n          criteria\n        }\n      }\n    }\n    k8sProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      group\n      version\n      resource\n      namespace\n      resourceNames\n      fieldSelector\n      labelSelector\n      operation\n      verbosity\n    }\n    kubernetesDynatraceProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      endpoint\n      metrics {\n        metricsSelector\n        entitySelector\n      }\n      timeFrame\n      apiTokenSecretName\n      comparator {\n        type\n        value\n        criteria\n      }\n      verbosity\n    }\n    linuxDynatraceProperties {\n      probeTimeout\n      interval\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      endpoint\n      metrics {\n        metricsSelector\n        entitySelector\n      }\n      timeFrame\n      comparator {\n        type\n        value\n        criteria\n      }\n    }\n    promProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      stopOnFailure\n      endpoint\n      query\n      queryPath\n      comparator {\n        type\n        value\n        criteria\n      }\n      verbosity\n      auth {\n        authType\n        credentials\n        credentialsFile\n      }\n      tlsConfig {\n        caFile\n        certFile\n        keyFile\n        insecureSkipVerify\n      }\n    }\n    sloProperties {\n      probeTimeout\n      interval\n      retry\n      attempt\n      probePollingInterval\n      initialDelay\n      evaluationTimeout\n      stopOnFailure\n      platformEndpoint\n      sloIdentifier\n      evaluationWindow {\n        evaluationStartTime\n        evaluationEndTime\n      }\n      sloSourceMetadata {\n        apiTokenSecret\n        scope {\n          orgIdentifier\n          accountIdentifier\n          projectIdentifier\n        }\n      }\n      comparator {\n        type\n        value\n        criteria\n      }\n      verbosity\n      insecureSkipVerify\n    }\n    recentExecutions {\n      faultName\n      status {\n        verdict\n        description\n      }\n      executedByExperiment {\n        experimentID\n        experimentRunID\n        notifyID\n        experimentName\n        experimentType\n        updatedAt\n        updatedBy {\n          userID\n          username\n          email\n        }\n      }\n    }\n    referencedBy\n    isRemoved\n    isEnabled\n    updatedAt\n    createdAt\n    updatedBy {\n      userID\n      username\n      email\n    }\n    createdBy {\n      userID\n      username\n      email\n    }\n  }\n}","variables":{"identifiers":{"orgIdentifier":"'"${org_id}"'","accountIdentifier":"'"${account_id}"'","projectIdentifier":"'"${project_id}"'"},"request":{"probeID":"'"${probe_name}"'","name":"'"${probe_name}"'","type":"'"${probe_type}"'","isEnabled":true,"infrastructureType":"'"${infra_type}"'","kubernetesHTTPProperties":{"probeTimeout":"10s","interval":"2s","retry":null,"attempt":2,"probePollingInterval":"5s","url":"http://frontend:3000","method":{"get":{"criteria":"==","responseCode":"200"}}}}}}'

if [[ "$0" == "0" ]]; then echo "==> REQUEST SUCCESS"; else echo "==> REQUEST FAILED"; fi

# API CALL: CREATE CHAOS EXPERIMENT